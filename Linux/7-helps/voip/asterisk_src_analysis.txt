# Entry point for all subsystems init routines:
https://github.com/asterisk/asterisk/blob/c7a82711f628f62efe9ddbd51f420d12a4e59389/main/asterisk.c#L4212

Core components of Asterisk Core:
---------------------------------
- astobj2 - replacement containers for asterisk data structures.
  https://github.com/asterisk/asterisk/blob/master/main/astobj2.c

- AstDB - Asterisk internal database (wrapper over SQLite3) 
  https://github.com/asterisk/asterisk/blob/master/main/db.c
  https://github.com/asterisk/asterisk/blob/c7a82711f628f62efe9ddbd51f420d12a4e59389/configs/samples/asterisk.conf.sample#L6
  /var/lib/asterisk/astdb.sqlite3 - Default AstDB path

- Scheduler
  https://github.com/asterisk/asterisk/blob/c7a82711f628f62efe9ddbd51f420d12a4e59389/main/sched.c

- Taskprocessor
  https://github.com/asterisk/asterisk/blob/master/main/taskprocessor.c

  Taskprocessor
  Purpose: Manages queues of tasks and serializes their execution, typically using dedicated threads.
  How it works: A taskprocessor is a named object that holds a FIFO queue of tasks. Tasks are pushed onto the queue and are 
  executed one at a time, in order, by a thread associated with the taskprocessor.
  Usage: Used to ensure that certain tasks (like message handling or SIP transactions) are processed in order and not concurrently. 
  Modules can share or create their own taskprocessors for their specific needs.
  API: See include/asterisk/taskprocessor.h. Tasks are pushed with ast_taskprocessor_push(), and the taskprocessor handles them in turn.

  Scheduler
  Purpose: Schedules tasks to be executed at specific times in the future or at recurring intervals.
  How it works: The scheduler keeps a list of timed events. When a scheduled time is reached, the scheduler triggers the execution 
  of the associated task. This may involve pushing the task to a taskprocessor for serialized execution.
  Usage: Commonly used for periodic tasks, timeouts, and delayed actions. In the PJSIP SIP stack, for example, scheduled tasks are
  managed with both a scheduler context (for timing) and a taskprocessor (for actual execution).
  API: See files like main/sched.c and res/res_pjsip/pjsip_scheduler.c. Tasks are scheduled with functions like ast_sched_add().
  Key Differences
  Taskprocessor: Serializes and executes tasks, ensuring order and thread safety.
  Scheduler: Triggers tasks based on time, but does not itself execute the task logic—instead, it usually pushes these tasks to a
  taskprocessor.

  Summary:
  Use a scheduler when you want something to happen at a specific time or repeatedly.
  Use a taskprocessor when you need to serialize execution of tasks, regardless of when they are triggered.

- Memory Manager
  https://github.com/asterisk/asterisk/blob/master/main/astmm.c

  The file main/astmm.c in the Asterisk project is responsible for memory management with a strong emphasis on debugging and
  tracking memory usage. Its main purposes are:
  Custom Memory Allocation Wrappers:
  It provides custom implementations for memory allocation functions like malloc, calloc, realloc, strdup,
  and their variants. These wrappers add additional tracking and error-handling capabilities beyond the
  standard C library functions.

  Memory Debugging and Leak Detection:
  When compiled with debugging enabled (__AST_DEBUG_MALLOC), it tracks all memory allocations, their sizes,
  locations (file, line, function), and can detect memory leaks (memory that was allocated but not freed) 
  at program exit.
  It maintains a hash table of all active allocations.
  It can log allocations and frees, and report unfreed memory at exit.

  Corruption and Fence Checking:
  The code adds “fence” values before and after each allocated memory region to detect buffer overflows or 
  underflows (memory corruption). If these fences are overwritten, it logs a warning and can intentionally
  crash the program to aid in debugging.

  CLI Tools for Memory Diagnostics:
  The file implements several Asterisk CLI commands (like memory show allocations, memory show summary, etc.)
  for interactively checking memory usage, outstanding allocations, and possible anomalies. (DEBUG_MALLOC)

  Failure Simulation for Testing:
  There is support for chaos testing via macros like DEBUG_CHAOS_RETURN, which can randomly force memory 
  allocation failures.
  This helps developers test how robustly the application handles out-of-memory situations.

  Backtrace Support:
  With debugging enabled, it can capture and print backtraces for memory allocations, making it easier to 
  find where a particular allocation originated.

  In summary:
  Asterisk MM is a sophisticated memory manager and debugging aid for Asterisk. It is used to catch memory-related
  bugs (like leaks and corruption), analyze memory usage interactively, and improve the reliability of the project
  by enabling robust diagnostics and testing.

- Stasis Message Bus - internal Event-Driven Asterisk Bus
  https://github.com/asterisk/asterisk/blob/master/main/stasis.c

  In the context of the Asterisk project, "Stasis" is an internal messaging and application framework used
  within Asterisk to facilitate communication between different modules and components. It acts as a broker
  for events and messages, allowing various parts of the system—such as the core call-handling logic, channel
  drivers, and external applications—to communicate asynchronously and in a decoupled manner.
  
  Stasis is especially important for features like the Asterisk REST Interface (ARI), where it enables real-time
  control and monitoring of calls, channels, and bridges from external applications. Through Stasis, developers
  can interact with calls programmatically, receive events, and send commands without being tightly coupled to
  the internal workings of Asterisk.
  
  Key points about Stasis in Asterisk:
  - It is a messaging bus/framework within Asterisk.
  - It enables asynchronous communication between modules.
  - It is central to the operation of ARI (Asterisk REST Interface).
  - It allows for flexible and decoupled application development.

- Sorcery
  https://github.com/asterisk/asterisk/blob/master/main/sorcery.c

  In the context of Asterisk, "sorcery" refers to a framework and API for managing configuration objects 
  and their storage backends in a modular and extensible way.
  Specifically:
  The "sorcery" system allows Asterisk modules to define object types (such as users, endpoints, etc.) and
  map those types to "wizards,"   which are storage modules responsible for creating, retrieving, updating,
  and deleting these objects.
  A "sorcery" instance holds all information about object types, their fields, and their mappings to storage
  backends ("wizards").
  The sorcery system can be configured via the sorcery.conf file, which determines how different object types
  are stored or retrieved (e.g., from configuration files, databases, etc.).
  The file sorcery.c implements the logic for managing "sorcery" instances, the registration of object types,
  and the mapping of those types to storage wizards.
  In summary: "sorcery" in Asterisk is a core infrastructure for abstract, flexible, and pluggable configuration
  object management. It is not related to magic, but rather is a system that makes it easy to add, retrieve,
  and manipulate configuration objects from various sources.

- PBX - Core PBX routines
  https://github.com/asterisk/asterisk/blob/master/main/pbx.c

  The pbx.c file in Asterisk implements the core Private Branch Exchange (PBX) logic. It manages dialplan
  processing, extension matching, call routing, and context management—the fundamental functions of the 
  Asterisk telephony engine.

- Logger
  https://github.com/asterisk/asterisk/blob/master/main/logger.c

- Bucket API
  https://github.com/asterisk/asterisk/blob/master/main/bucket.c

  The "bucket" in main/bucket.c is typically used for managing collections of items, often as part of a hash
  table or similar structure. In C projects, buckets are commonly used to organize data for efficient lookup,
  storage, and retrieval, especially when dealing with large datasets.
  
  Possible Use Cases in Asterisk:
  
  Storing and managing call-related data
  Tracking sessions or resources
  Implementing fast lookup tables for internal data structures
  API:
  The "Bucket API" in this context refers to the set of functions and data structures in bucket.c that allow
  other parts of Asterisk to create, manipulate, and destroy these bucket-based collections.

- Timing - Timing source management
  https://github.com/asterisk/asterisk/blob/master/main/timing.c

- Config Parser
  http://github.com/asterisk/asterisk/blob/c7a82711f628f62efe9ddbd51f420d12a4e59389/pbx/pbx_config.c

- Other - Other key Entitys and routines
  https://github.com/asterisk/asterisk/blob/c7a82711f628f62efe9ddbd51f420d12a4e59389/main/asterisk.c#L4301


