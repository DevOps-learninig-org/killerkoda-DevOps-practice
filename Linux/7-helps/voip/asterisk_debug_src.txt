To compile Asterisk in debug mode to set a breakpoint in the desired module for step-by-step debugging, follow these steps:

Step 1: Clone Asterisk source code
----------------------------------
Fetch the latest version of Asterisk from its official repository on GitHub:
git clone https://github.com/asterisk/asterisk.git
cd asterisk

Step 2: Set up your environment
----------------------------------
Make sure you have necessary development tools and dependencies installed:
./contrib/scripts/install_prereq install

Step 3: Configure project with debug support
----------------------------------
Run the configuration script enabling debug symbols and disabling optimizations:
./configure --help
./configure --enable-dev-mode
make menuselect.makeopts
menuselect/menuselect --disable-all menuselect.makedeps
make -p | grep -E '^[a-zA-Z_-]+:' | cut -d: -f1 | sort -u
make
make install && make clean
touch /etc/asterisk/modules.conf
asterisk -f

The CFLAGS option adds symbolic information and turns off compiler optimization (-O0), which is essential for detailed debugging.

Step 4: Build Asterisk
----------------------------------
Compile the project while preserving debug symbols:
make -j$(nproc)
make install
make basic-pbx
> /etc/asterisk/pjsip.conf
make install-logrotate
groupadd asterisk
useradd -g asterisk asterisk
cp contrib/systemd/asterisk.service $(pkg-config systemd --variable systemdsystemunitdir)
systemctl daemon-reload

You can choose specific modules to be built through the interactive Menuselect menu (for example, channel modules or applications).

Step 5: Run Asterisk under GDB debugger
----------------------------------
Start Asterisk within the GDB debugger by running:
gdb ./asterisk
(gdb) run -vvv -c

Now Asterisk runs inside GDB. To add a breakpoint before executing a particular function, enter this command:
(gdb) break asterisk.c:asterisk_daemon
(gdb) set follow-fork-mode child
(gdb) run
(gdb) n
....
(gdb) info inferiors

For instance, if you want to stop execution at an incoming call processing function in the SIP channel file:
(gdb) break channels/chan_sip.c:sip_handle_request_invite

Then resume execution using:
(gdb) continue

Step 6: Step-through debugging
----------------------------------
After hitting the breakpoint, proceed line-by-line with commands like:
(gdb) next      # Execute next statement
(gdb) step      # Enter into a function
(gdb) print var # Print value of a variable

By following these steps, you'll be able to thoroughly inspect program behavior during runtime.

.vscode/launch.json  # install GDB and C/C++ for Visual Studio Code first
----------------------------------
{
  "version": "0.2.0",
  "configurations": [
    {
      "name": "Debug Asterisk (Local Attach)",
      "type": "cppdbg",
      "request": "attach",
      "program": "/usr/sbin/asterisk",
      "processId": "${command:pickProcess}",
      "MIMode": "gdb",
      "miDebuggerPath": "/usr/bin/gdb",
      "miDebuggerArgs": "--interpreter=mi",
      "setupCommands": [
        {
          "description": "Enable pretty-printing",
          "text": "-enable-pretty-printing",
          "ignoreFailures": true
        },
        {
          "description": "Set debug mode",
          "text": "handle SIG33 pass nostop noprint"
        }
      ],
    },
    {
      "name": "Debug Asterisk (Local Launch)",
      "type": "cppdbg",
      "request": "launch",
      "program": "/usr/sbin/asterisk",
      "args": ["-f", "-vvvgc"],  // Консольный режим с максимальным логгированием
      "stopAtEntry": false,
      "cwd": "${workspaceFolder}",
      "environment": [],
      "externalConsole": false,
      "MIMode": "gdb",
      "miDebuggerPath": "/usr/bin/gdb",
      "setupCommands": [
        {
          "description": "Enable pretty-printing",
          "text": "-enable-pretty-printing",
          "ignoreFailures": true
        }
      ]
    }
  ]
}

Naked Asterisk (menuselect/menuselect --disable-all menuselect.makedeps) modules description
----------------------------------
acl - Named ACL system
ccss - Call Completion Supplementary Services
cdr - CDR Engine
cel - CEL Engine
dnsmgr - DNS Manager
dsp - DSP
enum - ENUM Support
extconfig - Configuration
features - Call Features
http - Built-in HTTP Server
indications - Indication Tone Handling 
logger - Logger
manager - Asterisk Manager Interface
plc - PLC
sounds - Sounds Index
udptl - UDPTL

----------------------------------
acl – Named ACL system
Provides a named Access Control List (ACL) system. Allows defining IP-based access rules (e.g., for SIP peers) to restrict or permit connections.

ccss – Call Completion Supplementary Services
Implements call completion features like CCBS (Call Completion on Busy Subscriber) and CCNR (Call Completion on No Reply) for SIP telephony in enterprise environments.

cdr – CDR Engine
Generates Call Detail Records (call logs). Stores call metadata (start/end time, duration, caller ID, etc.) for billing and analytics.

cel – CEL Engine
Provides Channel Event Logging, recording detailed call events (transfers, holds, etc.) beyond basic CDR data.

dnsmgr – DNS Manager
Manages DNS queries and caching. Helps Asterisk dynamically resolve SIP providers' SRV/TXT records.

dsp – DSP
Handles Digital Signal Processing—DTMF detection, echo cancellation, fax tone analysis, and other audio operations.

enum – ENUM Support
Supports E.164 Number Mapping (ENUM), converting phone numbers into DNS queries (e.g., +1234 → sip:user@example.com).

extconfig – Configuration
Enables loading Asterisk configurations from external sources (e.g., MySQL, PostgreSQL) instead of flat files.

features – Call Features
Implements core call features:
    Call Parking
    Blind/Attended Transfer
    Hold/Resume
    DTMF-controlled functions

http – Built-in HTTP Server
Embedded HTTP server for web-based management (AMI/AJAM) or serving static files (e.g., sound prompts).

indications – Indication Tone Handling
Manages country-specific call progress tones (busy signals, dial tones, etc.).

logger – Logger
Controls Asterisk’s logging system (verbosity levels, log destinations like files/syslog).

manager – Asterisk Manager Interface (AMI)
TCP-based API for external control/monitoring of Asterisk (call management, events, etc.).

plc – Packet Loss Concealment
Compensates for VoIP packet loss by masking audio gaps (improves call quality).

sounds – Sounds Index
Indexes audio files (IVR prompts, hold music) for fast playback.

udptl – UDPTL
Implements UDP Transport Layer for T.38 fax over IP (FoIP) transmissions.
